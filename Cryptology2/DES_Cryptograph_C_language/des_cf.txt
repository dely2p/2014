#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define XOR(a, b) (a || b) && !(a && b)

void Encryption(void);    
void Input(unsigned char *text); 
void Initial_permutation(unsigned char *text);      
void rotate(unsigned char *text, unsigned char(*r_key)[48]);
void Final_permutation(unsigned char *text);       
void printplaintext(unsigned char *text);    

void main (void)
{
 Encryption();
}
void Encryption(void)
{ 
 int i;
 unsigned char text[64];  
 unsigned char r_key[16][48] = {
   {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1},
   {0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,0,1,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1},
   {0,0,0,0,0,1,1,0,1,1,1,0,1,1,0,1,1,0,1,0,0,1,1,1,1,0,1,0,1,1,0,0,1,1,1,1,0,1,0,1,1,0,1,1,0,1,1,1},
   {0,1,0,1,1,1,1,0,0,0,1,0,1,1,0,1,0,0,0,0,0,0,1,1,0,0,1,1,1,0,1,1,0,1,1,0,1,1,1,0,1,1,1,0,0,0,1,1},
   {0,1,1,1,1,0,0,1,1,0,1,0,0,1,1,0,0,0,1,0,1,0,0,1,1,1,1,1,1,1,1,0,1,1,0,0,1,0,0,1,0,0,0,1,0,0,1,1},
   {0,1,0,0,0,0,1,1,1,1,0,1,0,1,0,0,1,0,0,0,1,1,1,0,1,0,0,0,0,1,1,1,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,0},
   {0,1,1,1,0,0,0,0,1,0,0,0,1,0,1,0,1,1,0,1,0,0,1,0,1,1,0,1,1,1,0,1,1,0,1,1,1,0,1,1,1,1,0,0,0,0,0,0},
   {0,0,1,1,0,1,0,0,1,1,1,1,1,1,0,0,0,0,1,0,0,0,1,0,1,1,1,1,0,0,0,0,1,1,0,1,0,1,1,0,0,1,1,0,1,1,0,0},
   {1,0,0,0,0,1,0,0,1,0,1,1,1,0,1,1,0,1,0,0,0,1,0,0,0,1,1,1,0,0,1,1,1,1,0,1,1,1,0,0,1,1,0,0,1,1,0,0},
   {1,1,0,1,0,0,1,0,0,1,1,1,0,1,1,0,0,1,0,1,0,1,1,1,0,0,0,0,1,0,0,0,1,0,1,1,0,1,0,1,1,0,1,1,1,1,1,1},
   {1,1,1,0,1,1,0,1,0,1,0,1,0,1,0,1,0,1,1,0,0,0,0,0,1,0,1,0,1,1,1,1,0,1,1,1,1,1,0,0,1,0,1,0,0,1,0,1},
   {1,1,0,0,0,0,1,0,1,1,0,0,0,0,0,1,1,1,1,0,1,0,0,1,0,1,1,0,1,0,1,0,0,1,0,0,1,0,1,1,1,1,1,1,0,0,1,1},
   {1,0,0,1,1,0,0,1,1,1,0,0,0,0,1,1,0,0,0,1,0,0,1,1,1,0,0,1,0,1,1,1,1,1,0,0,1,0,0,1,0,0,0,1,1,1,1,1},
   {1,0,1,0,0,1,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,0,1,1,1,1,0,0,0,1,1,1,0,0,0,1,0,1,1,1,1,1,0,0,0,0,0,0},
   {1,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,1,1,0,1,0,1,0,1,1,1,0,1,1,0,0,1,1,0,1,0,0,0,1,1,0,1,1,1,1,1,0,0},
   {1,0,0,1,1,0,0,1,1,0,0,1,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,1,0,1,0,1,1,1,0,0,0,1,1,0,0,1,1,0,1,1,0,1}
 };

 Input(text); 
 printf("\n->평문                : "); 
 
 for(i=0; i<64; i++)
 {
  printf("%d", text[i]); if(i%8 == 7) printf(" "); 
 }
 
 Initial_permutation(text);     
 
 printf("\n->Initial_permutation : ");
 for(i=0; i<64; i++)
 {
  printf("%d", text[i]); if(i%8 == 7) printf(" "); 
 }
 printf("\n\n");

 //16라운드함수에 평문과 라운드 키값을 받아넣음
 rotate(text, r_key);   

 Final_permutation(text); 
 
 printf("\n\nFinal_permutation :   "); 
 for(i=0; i<64; i++)
 {
  printf("%d", text[i]); if(i%8 == 7) printf(" "); 
 }
 

 printplaintext(text);  
}

//DES알고리즘
void rotate(unsigned char *text, unsigned char(*r_key)[48]) 
{
 int i, j, k;
 
 unsigned char Right[32];       // 오른쪽 32비트
 unsigned char Expansion[48];      // 확장p박스 저장 변수
 unsigned char S_result[32];       // Sbox결과 2진수 저장
 unsigned char Straight[32];       // 치환p박스 저장 변수
 unsigned char printstay[6];
 unsigned char row, row1, row2, col, col1, col2, col3, col4;
 unsigned char sbox[8];
 
 //확장 P-박스 
 char InitialPermutationTable[48] ={ 32,  1,  2,  3,  4,  5,   
           4,  5,  6,  7,  8,  9, 
           8,  9, 10, 11, 12, 13, 
          12, 13, 14, 15, 16, 17,
          16, 17, 18, 19, 20, 21,
          20, 21, 22, 23, 24, 25,
          24, 25, 26, 27, 28, 29,
          28, 29, 30, 31, 32, 1    };


 //단순 P-박스(단순치환)
 char FinalPermutationTable[32] = {  16,  7, 20, 21, 29, 12, 28, 17, 
                1, 15, 23, 26,  5, 18, 31, 10, 
           2,  8, 24, 14, 32, 27,  3,  9, 
          19, 13, 30,  6, 22, 11,  4, 25   };
  
 
 //64비트로 이루어진 8개의 S-박스 
 char S[8][4][16] = {        
 
   //S-박스1
   {{14, 4,13, 1, 2,15,11, 8, 3,10, 6,12, 5, 9, 0, 7},
    { 0,15, 7, 4,14, 2,13, 1,10, 6,12,11, 9, 5, 3, 8}, 
    { 4, 1,14, 8,13, 6, 2,11,15,12, 9, 7, 3,10, 5, 0},
    {15,12, 8, 2, 4, 9, 1, 7, 5,11, 3,14,10, 0, 6,13}  },
  
  //S-박스2
   {{15, 1, 8,14, 6,11, 3, 4, 9, 7, 2,13,12, 0, 5,10},
    { 3,13, 4, 7,15, 2, 8,14,12, 0, 1,10, 6, 9,11, 5}, 
    { 0,14, 7,11,10, 4,13, 1, 5, 8,12, 6, 9, 3, 2,15},
    {13, 8,10, 1, 3,15, 4, 2,11, 6, 7,12, 0, 5,14, 9}  },

  //S-박스3
   {{10, 0, 9,14, 6, 3,15, 5, 1,13,12, 7,11, 4, 2, 8},
    {13, 7, 0, 9, 3, 4, 6,10, 2, 8, 5,14,12,11,15, 1}, 
    {13, 6, 4, 9, 8,15, 3, 0,11, 1, 2,12, 5,10,14, 7},
    { 1,10,13, 0, 6, 9, 8, 7, 4,15,14, 3,11, 5, 2,12}  },
  
  
  //S-박스4
   {{ 7,13,14, 3, 0, 6, 9,10, 1, 2, 8, 5,11,12, 4,15},
    {13, 8,11, 5, 6,15, 0, 3, 4, 7, 2,12, 1,10,14, 9}, 
    {10, 6, 9, 0,12,11, 7,13,15, 1, 3,14, 5, 2, 8, 4},
    { 3,15, 0, 6,10, 1,13, 8, 9, 4, 5,11,12, 7, 2,14}  },
  
  //S-박스5
   {{ 2,12, 4, 1, 7,10,11, 6, 8, 5, 3,15,13, 0,14, 9},
    {14,11, 2,12, 4, 7,13, 1, 5, 0,15,10, 3, 9, 8, 6}, 
    { 4, 2, 1,11,10,13, 7, 8,15, 9,12, 5, 6, 3, 0,14},
    {11, 8,12, 7, 1,14, 2,13, 6,15, 0, 9,10, 4, 5, 3}  },
  
  
  //S-박스6
   {{12, 1,10,15, 9, 2, 6, 8, 0,13, 3, 4,14, 7, 5,11}, 
    {10,15, 4, 2, 7,12, 9, 5, 6, 1,13,14, 0,11, 3, 8}, 
    { 9,14,15, 5, 2, 8,12, 3, 7, 0, 4,10, 1,13,11, 6},
    { 4, 3, 2,12, 9, 5,15,10,11,14, 1, 7, 6, 0, 8,13}  },
  
  
  //S-박스7
   {{ 4,11, 2,14,15, 0, 8,13, 3,12, 9, 7, 5,10, 6, 1},
    {13, 0,11, 7, 4, 9, 1,10,14, 3, 5,12, 2,15, 8, 6}, 
    { 1, 4,11,13,12, 3, 7,14,10,15, 6, 8, 0, 5, 9, 2},
    { 6,11,13, 8, 1, 4,10, 7, 9, 5, 0,15,14, 2, 3,12}  },
  
  
  //S-박스8
  {{13, 2, 8, 4, 6,15,11, 1,10, 9, 3,14, 5, 0,12, 7},
   { 1,15,13, 8,10, 3, 7, 4,12, 5, 6,11, 0,14, 9, 2}, 
   { 7,11, 4, 1, 9,12,14, 2, 0, 6,10,13,15, 3, 5, 8},
   { 2, 1,14, 7, 4,10, 8,13,15,12, 9, 0, 3, 5, 6,11}  }
 };
 
 //라운드 16번만큼 반복하는 for문
 for(k=0; k<16; k++)           
 { 
  printf("\n =========================================================== round %d ===========================================================", k+1);

  //오른쪽의 32비트만 저장한다
  memcpy(Right, &text[32], 32);       

  //확장 p박스를 이용
  for(i=0; i<48; i++)
  {
   Expansion[i] = text[ InitialPermutationTable[i] - 1 + 32]; 
  }

  printf("\n->Expansion-p(확장순열) : ");
  for(i=0; i<48; i++)
  { 
   printf("%d", Expansion[i]); if(i%8 == 7) printf(" ");
  }
  
  //키 값과 확장-p를 나온 값을 XOR한다.
  for(i=0; i<48 ;i++)
  {
   Expansion[i] = XOR(Expansion[i], r_key[k][i]); 
  }
 
  printf("\n->Round Key             : ");
  for(i=0; i<48; i++)
  {
   printf("%d", r_key[k][i]); if(i%8 == 7) printf(" "); 
  }

  printf("\n->XOR값                 : ");
  for(i=0; i<48; i++) 
  {
   printf("%d", Expansion[i]); if(i%8 == 7) printf(" "); 
  }
  
  //s-박스를 처리하는 루틴
  for(i=0; i<8; i++)         
  {
   for(j=0; j<6; j++)
   {
    printstay[j] = Expansion[6*i+j]; 
   }
   
   row1 = printstay[0];
   row2 = printstay[5];
   col1 = printstay[1];
   col2 = printstay[2];
   col3 = printstay[3];
   col4 = printstay[4];
   
   row = (row1<<1) | row2;
   col = (col1<<3) | (col2<<2) | (col3<<1) | col4;   
   sbox[i] = S[i][row][col]; 
  }
  printf("\n->S-박스                : ");
  for (i=0; i<8; i++) 
  {
   printf("[S%d: %d] ", i, sbox[i]);
  }
  
  //16진수 -> 2진수
  for (i=0; i<8; i++) 
  {
   S_result[i*4+0] = 0x01 & (sbox[i] >> 3);
   S_result[i*4+1] = 0x01 & (sbox[i] >> 2);
   S_result[i*4+2] = 0x01 & (sbox[i] >> 1);
   S_result[i*4+3] = 0x01 & (sbox[i] >> 0);
  }
 
  for(i=0; i<32; i++)
  {
   printf("%d", S_result[i]); if(i%8 == 7) printf(" "); 
  }
    
  for(i=0; i<32; i++)
  {
   Straight[i] = S_result[ FinalPermutationTable[i] - 1]; //순열함수
  }
 
  printf("\n->Straight(순열결과)    : ");
  for(i=0; i<32; i++)
  {
   printf("%d", Straight[i]); if(i%8 == 7) printf(" "); 
  }
    
  for(i=0; i<32; i++)
  {
   text[i] = XOR(text[i], Straight[i]); 
  }
          
  memcpy(&text[32], Right, 32); 
  
  if(k<=14) 
  {
    memcpy(&text[32], text, 32); 
    memcpy(text, Right, 32); 
  }

  printf("\n->text값                : ");
  for(i=0; i<64; i++)
  { 
   printf("%d", text[i]); if(i%8 == 7) printf(" "); 
  }
  printf("\n");
 }//for문끝
}//DES함수끝

 

void Initial_permutation(unsigned char *text) 
{
 unsigned char printstay[64];
 int i;
 
 char Initial_permutation[64] ={ 58, 50, 42, 34, 26, 18, 10, 2, 
         60, 52, 44, 36, 28, 20, 12, 4, 
         62, 54, 46, 38, 30, 22, 14, 6, 
         64, 56, 48, 40, 32, 24, 16, 8, 
         57, 49, 41, 33, 25, 17, 9, 1, 
         59, 51, 43, 35, 27, 19, 11, 3, 
         61, 53, 45, 37, 29, 21, 13, 5, 
         63, 55, 47, 39, 31, 23, 15, 7  };

 for(i=0; i<64 ; i++)
 {
  printstay[i] = text[ Initial_permutation[i] - 1 ]; 
 }
 memcpy(text, printstay, 64);
}


void Final_permutation(unsigned char *text) 
{
 unsigned char printstay[64];
 int i;
 
 char Final_permutation[64] ={40, 8, 48, 16, 56, 24, 64, 32,
          39, 7, 47, 15, 55, 23, 63, 31, 
         38, 6, 46, 14, 54, 22, 62, 30, 
         37, 5, 45, 13, 53, 21, 61, 29, 
         36, 4, 44, 12, 52, 20, 60, 28, 
         35, 3, 43, 11, 51, 19, 59, 27, 
         34, 2, 42, 10, 50, 18, 58, 26, 
         33, 1, 41, 9, 49, 17, 57, 25 };

 for(i=0; i<64 ; i++) printstay[i] = text[ Final_permutation[i] - 1 ];
 memcpy(text, printstay, 64);
}

//평문과 키를 입력받는 함수 
void Input(unsigned char *text) 
{ 
 int i, j, k;
 char inp_str[50];    
 int printstay;

 printf("★★★평문을 입력하세요(16byte) ===> ");
 
 i = 0; 
 do 
 {
  gets(inp_str);
  
  while(inp_str[i])
  {
   i++;
  }
  if(i != 16)
  {
   printf("★★★평문을 입력하세요(16byte) ===> ");
   for(i=0; i<50; i++)
   {
    inp_str[i] = (char)NULL;
   }
   i = 0;
  }
 }
 while(i != 16);
 i = 0; k = 0;

 while(inp_str[i])
 {
  if(inp_str[i] < 65 && inp_str[i] > 48)
  {
   printstay = inp_str[i] - 48;
  }
  else
  {
   printstay = inp_str[i] - 55;
  }
    
  for(j = 0 ; j < 8 ; j++)
  {
   if((8 - j) >= 5)
   {
    continue;
   }
   if (0 != (0x80 & (printstay << j)))
   {
    text[k] = 1;
   }
   else
   {
    text[k] = 0;
   }
   k++;
  }
  i++;
 }

 printf("\n->입력값은 2진수로    : "); 
 
 
 for(i=0; i<64; i++)
 {
  printf("%d", text[i]);
  if(i%4 == 3) printf(" ");
 }
 
}//input함수 끝


//이진수를 평문형태로 바꿔주는 함수
void printplaintext(unsigned char *text)  
{
 int i, j;
 unsigned char printstay[8]={0,0,0,0,0,0,0,0};
 for(i=0; i<8; i++)
 {
  for(j=0; j<8; j++)
  {
   if(0 != text[i*8 + j])
   {
    printstay[i] = printstay[i] | (0x1 << (7-j));
   }
   else printstay[i] = printstay[i] | (0x0 << (7-j));
  }
 }
 printf("\n----------------------------------------------------------------------------------------------------------------------------------\n");
 printf("\nFinal_permutation를 문자열로!  : ");
 for(i=0; i<8; i++) 
 {
  printf("%x", printstay[i]);
 }
 printf("\n\n");
}
